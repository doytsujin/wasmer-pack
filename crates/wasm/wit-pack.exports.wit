resource metadata {
    static new: func(package-name: string, version: string) -> metadata
    set-description: func(description: string)
}

record package {
    metadata: metadata,
    libraries: list<library>,
}

resource %interface {
    static from-wit: func(name: string, contents: string) -> expected<%interface, error>
    static from-path: func(path: string) -> expected<%interface, error>
}

resource module {
    static new: func(name: string, abi: abi, wasm: list<u8>) -> module
}

record library {
    %interface: %interface,
    module: module,
}

enum abi {
    none,
    wasi,
}

/// An error that may occur.
record error {
    /// The error message.
    message: string,
    /// An extended error message, possibly including a backtrace and the list
    /// of errors which led to this one.
    verbose: string,
    /// The chain of source errors.
    causes: list<string>,
}

record file {
    filename: string,
    contents: list<u8>,
}

generate-javascript: func(pkg: package) -> expected<list<file>, error>
generate-python: func(pkg: package) -> expected<list<file>, error>
