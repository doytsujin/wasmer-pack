const fs = require("fs/promises");
{%- if has_wasi_libraries %}
const { init: initWasi, WASI } = require("@wasmer/wasi");
{%- endif %}
{%- for lib in libraries %}
const { {{lib.class_name}}: _{{lib.class_name}} } = require("./{{lib.interface_name}}/{{lib.interface_name}}.js");
{%- endfor %}

class Bindings {
    constructor() {
        this._cache = {}
    }

    /** Lazily fetch and compile the WebAssembly module */
    async _getModule(filename) {
        if (filename in this._cache) {
            return this._cache[filename];
        }

        const wasm = await fs.readFile(`${__dirname}/${filename}`);
        this._cache[filename] = await WebAssembly.compile(wasm);
        return this._cache[filename];
    }

    {%- for lib in libraries %}
    async {{lib.ident}}(options) {
        const wrapper = new _{{lib.class_name}}();

        {%- if lib.wasi %}
        await initWasi();
        const module = options?.module || await this._getModule("{{lib.interface_name}}/{{lib.module_filename}}");
        const wasi = options?.wasi || new WASI({}, module);
        const imports = Object.assign({}, options?.imports, wasi.getImports(module));
        {%- else %}
        const module = await this._getModule("{{lib.interface_name}}/{{lib.module_filename}}");
        const imports = options?.imports || {};
        {%- endif %}

        await wrapper.instantiate(module, imports);

        {%- if lib.wasi %}
        wasi.instantiate(wrapper.instance);
        {%- endif %}

        return wrapper;
    }
    {%- endfor %}
}

module.exports = { Bindings };
