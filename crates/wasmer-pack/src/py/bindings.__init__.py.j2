'''
Bindings to the {{interface_name}} library.
'''

from pathlib import Path
from typing import Optional, Any

from wasmer import Store, Module, wasi # type: ignore

{%- for lib in libraries %}
from .{{lib.ident}}.bindings import {{lib.class_name}}

{%- endfor %}

class Bindings:
    """
    Instantiate bindings to the various libraries in this package.
    """

    def __init__(self, store: Store):
        self._store = store
        self._cache: dict[str, Module] = {}

    def _get_module(self, filename: str) -> Module:
        if filename in self._cache:
            return self._cache[filename]

        wasm = Path(__file__).parent.joinpath(filename).read_bytes()
        module = Module(self._store, wasm)
        self._cache[filename] = module
        return module

    {% for lib in libraries -%}
    def {{lib.ident}}(
        self,
        {%- if lib.wasi %}
        env: Optional[wasi.Environment] = None,
        {%- endif %}
        imports: Optional[dict[str, Any]] = None,
        module: Optional[Module] = None,
    ) -> {{lib.class_name}}:
        """
        Instantiate the "{{lib.ident}}" library.

        {%- if lib.wasi %}
        :param env: A pre-initialized WASI environment. If not specified, a
                     default value will be used.
        {%- endif %}
        :param imports: Additional imports to be provided to the WebAssembly
                        module.
        :param module: A user-specified WebAssembly module to use instead of the
                       one bundled with this package.
        """

        filename = "{{lib.ident}}/{{lib.module_filename}}"
        if not module:
            module = self._get_module(filename)

        if not imports:
            imports = {}

        {%- if lib.wasi %}
        version = wasi.get_version(module, strict=True)
        assert version is not None, f'"{filename}" is not a valid WASI executable'
        if not env:
            env = wasi.StateBuilder("{{lib.ident}}").finalize()
        wasi_imports = env.generate_imports(self._store, version)
        imports.update(wasi_imports)
        {%- endif %}

        return {{lib.class_name}}(self._store, imports, module)
    {% endfor %}
