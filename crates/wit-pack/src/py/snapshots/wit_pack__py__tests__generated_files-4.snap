---
source: crates/wit-pack/src/py/mod.rs
expression: "files[\"wit_pack/bindings/__init__.py\"].utf8_contents().unwrap()"
---
'''
Bindings to the  library.
'''

from pathlib import Path
from typing import Optional, Any
from dataclasses import dataclass

from wasmer import Store, Module, wasi # type: ignore
from .wit_pack.bindings import WitPack

@dataclass
class LoadArgs:
    wasi: Optional[wasi.Environment]
    imports: Optional[dict[str, Any]]

class Bindings:
    """
    Instantiate bindings to the various libraries in this package.
    """

    def __init__(self, store: Store):
        self._store = store
        self._cache: dict[str, Module] = {}

    def _get_module(self, filename: str) -> Module:
        if filename in self._cache:
            return self._cache[filename]

        wasm = Path(__file__).parent.joinpath(filename).read_bytes()
        module = Module(self._store, wasm)
        self._cache[filename] = module
        return module

    def wit_pack(self, args: Optional[LoadArgs] = None) -> WitPack:
        filename = "wit_pack/wit_pack_wasm.wasm"
        module = self._get_module(filename)

        imports = {**args.imports} if (args and args.imports) else {}

        return WitPack(self._store, imports, module)
    
