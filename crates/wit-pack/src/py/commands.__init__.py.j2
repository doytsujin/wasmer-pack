from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Any
from wasmer import Instance, Module, Store, wasi # type: ignore

@dataclass
class ExitStatus:
    """The status code returned when the executable finished."""
    code: int

    @property
    def success(self):
        return self.code == 0

class Commands:
    def __init__(self, store: Store):
        self._store = store
        self._cache: dict[str, Module] = {}

    def _get_module(self, filename: str) -> Module:
        if filename in self._cache:
            return self._cache[filename]

        wasm = Path(__file__).parent.joinpath(filename).read_bytes()
        module = Module(self._store, wasm)
        self._cache[filename] = module
        return module

    {% for cmd in commands %}
    def {{cmd.ident}}(self, env: wasi.Environment, imports: Optional[dict[str, Any]] = None) -> ExitStatus:
        module = self._get_module("{{cmd.module_filename}}")
        version = wasi.get_version(module, strict=True)

        assert version is not None, '"{{cmd.module_filename}}" is not a valid WASI executable'

        imports = {**imports} if imports else {}
        wasi_imports = env.generate_import_object(self._store, version)
        imports.update(wasi_imports.to_dict())

        instance = Instance(module, imports)

        code = instance.exports._start()
        return ExitStatus(code=code or 0)
    {% endfor %}
