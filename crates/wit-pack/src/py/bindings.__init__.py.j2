'''
Bindings to the {{interface_name}} library.
'''

from pathlib import Path
from typing import Optional, Any
from dataclasses import dataclass

from wasmer import Store, Module, wasi # type: ignore

{%- for lib in libraries %}
from .{{lib.ident}}.bindings import {{lib.class_name}}

{%- endfor %}

@dataclass
class LoadArgs:
    wasi: Optional[wasi.Environment]
    imports: Optional[dict[str, Any]]

class Bindings:
    """
    Instantiate bindings to the various libraries in this package.
    """

    def __init__(self, store: Store):
        self._store = store
        self._cache: dict[str, Module] = {}

    def _get_module(self, filename: str) -> Module:
        if filename in self._cache:
            return self._cache[filename]

        wasm = Path(__file__).parent.joinpath(filename).read_bytes()
        module = Module(self._store, wasm)
        self._cache[filename] = module
        return module

    {% for lib in libraries -%}
    def {{lib.ident}}(self, args: Optional[LoadArgs] = None) -> {{lib.class_name}}:
        filename = "{{lib.ident}}/{{lib.module_filename}}"
        module = self._get_module(filename)

        imports = {**args.imports} if (args and args.imports) else {}

        {%- if lib.wasi %}
        version = wasi.get_version(module, strict=True)
        assert version is not None, f'"{filename}" is not a valid WASI executable'
        env = args.wasi if (args and args.wasi) else wasi.StateBuilder("{{lib.ident}}").finalize()
        wasi_imports = env.generate_imports(self._store, version)
        imports.update(wasi_imports)
        {%- endif %}

        return {{lib.class_name}}(self._store, imports, module)
    {% endfor %}
